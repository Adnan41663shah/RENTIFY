<% layout("/layouts/boilerplate") %>
    <div class="row"></div>
    <div class="col-8 offset-2 mb-3">
        <br>
        <h1>Create new Listing</h1>
        <form action="/listings" method="POST" novalidate class="needs-validation" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <input type="text" name="listing[title]" class="form-control" placeholder="Enter title" required>
                <div class="valid-feedback">Accepted</div>
                <div class="invalid-feedback">Title should be valid!</div>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <textarea name="listing[description]" class="form-control" rows="2" cols="35" required></textarea>
                <div class="valid-feedback">Accepted</div>
                <div class="invalid-feedback">Please Enter a short Description!</div>
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label>
                <input type="number" name="listing[price]" class="form-control" placeholder="Enter number" required>
                <div class="valid-feedback">Accepted</div>
                <div class="invalid-feedback">Price should be valid!</div>
            </div>
            <div class="mb-3"> 
                <label for="images" class="form-label">Upload Listing Images (max 3):</label>
                <input type="file" name="listing[images]" class="form-control" multiple required>
                <small class="text-muted">You can select up to 3 images.</small>
            </div>
            <div class="row">
                <div class="mb-3 col-md-4">
                    <label for="location" class="form-label">Location:</label>
                    <input type="text" name="listing[location]" class="form-control" placeholder="Enter Location" required>
                    <div class="valid-feedback">Accepted</div>
                    <div class="invalid-feedback">location should be valid!</div>
                </div>
                <div class="mb-3 col-md-8">
                    <label for="country" class="form-label">Country:</label>
                    <input type="text" name="listing[country]" class="form-control" placeholder="Enter Coutry" required>
                    <div class="valid-feedback">Accepted</div>
                <div class="invalid-feedback">Country should be valid!</div>
                </div>
            </div>
            <div class="mb-3">
              <div class="d-flex align-items-center justify-content-between">
                <label class="form-label mb-1">Amenities</label>
                <span class="text-muted small">Optional</span>
              </div>
              <input id="amenities-search" type="text" placeholder="Search amenities" class="form-control mb-2" aria-label="Search amenities">
              <div id="amenities-root" class="w-100"></div>
            </div>
            <button class="btn btn-dark add-btn">Add Listing</button>
        </form>
    </div>
    </div>
    <script>
      const amenitiesData = {
        "Property Essentials": [
          "Wi-Fi / High-speed Internet",
          "Air Conditioning",
          "Heating",
          "Hot Water",
          "Electricity Backup (Generator/Inverter)",
          "Private Entrance",
          "Security Cameras on Property",
          "Fire Extinguisher",
          "First Aid Kit",
          "Smoke Alarm",
          "Carbon Monoxide Alarm"
        ],
        "Bedroom & Laundry": [
          "Bed Linen",
          "Extra Pillows & Blankets",
          "Wardrobe / Closet",
          "Hangers",
          "Iron",
          "Ironing Board",
          "Washing Machine",
          "Dryer",
          "Laundry Soap",
          "Safe"
        ],
        "Kitchen & Dining": [
          "Fully Equipped Kitchen",
          "Refrigerator",
          "Microwave",
          "Stove / Cooktop",
          "Oven",
          "Dishwasher",
          "Toaster",
          "Coffee Maker / Kettle",
          "Cooking Basics (pots, pans, oil, salt, etc.)",
          "Dishes & Silverware",
          "Dining Table",
          "Water Purifier"
        ],
        "Bathroom": [
          "Shower",
          "Bathtub",
          "Towels",
          "Toiletries (Shampoo, Soap, etc.)",
          "Hair Dryer",
          "Hot Water",
          "Toilet Paper"
        ],
        "Entertainment": [
          "Smart TV",
          "Cable / Satellite Channels",
          "Netflix / OTT Access",
          "Sound System / Bluetooth Speaker",
          "Board Games",
          "Books and Magazines"
        ],
        "Outdoor Features": [
          "Balcony / Terrace",
          "Private Garden / Lawn",
          "Private Pool",
          "Shared Pool",
          "Barbecue Grill",
          "Outdoor Furniture",
          "Fire Pit",
          "Parking Space",
          "Rooftop Access"
        ],
        "Recreation & Wellness": [
          "Gym / Fitness Center",
          "Spa / Sauna",
          "Jacuzzi / Hot Tub",
          "Yoga Mat / Meditation Space",
          "Indoor Games (Table Tennis, Pool Table, etc.)"
        ],
        "Family & Kids Friendly": [
          "Crib / Cot",
          "High Chair",
          "Childrenâ€™s Books & Toys",
          "Child-Safe Room Setup",
          "Babysitter Recommendations"
        ],
        "Work & Connectivity": [
          "Dedicated Workspace / Desk",
          "Office Chair",
          "Fast Wi-Fi (Speed Mention Option)",
          "Power Backup",
          "Printer / Scanner"
        ],
        "Accessibility & Safety": [
          "Wheelchair Accessible",
          "Elevator",
          "Step-Free Access",
          "Wide Doorways",
          "Accessible Parking",
          "Grab Bars in Bathroom"
        ],
        "Pet Amenities": [
          "Pets Allowed",
          "Pet Bed",
          "Food & Water Bowls",
          "Nearby Pet Park"
        ],
        "Transportation & Location": [
          "Free Parking On Premises",
          "Street Parking",
          "Paid Parking Nearby",
          "EV Charger",
          "Airport Pickup / Drop",
          "Public Transport Nearby",
          "Bicycle / Scooter Rental"
        ],
        "Food & Hospitality": [
          "Breakfast Included",
          "Room Service",
          "Mini Bar",
          "Welcome Drink",
          "Chef on Demand",
          "Grocery Delivery"
        ],
        "Housekeeping & Maintenance": [
          "Daily Cleaning Service",
          "Laundry Service",
          "Trash Disposal",
          "24/7 Maintenance Support"
        ],
        "Luxury / Premium Services": [
          "Butler Service",
          "Chauffeur",
          "Personal Concierge",
          "Private Security",
          "Event Hosting Space"
        ],
        "Eco-Friendly Features": [
          "Solar Power",
          "Rainwater Harvesting",
          "Recycling Facilities",
          "Organic Toiletries",
          "Sustainable Furniture"
        ]
      };

      function renderAmenities(filter = ""){
        const root = document.getElementById("amenities-root");
        root.innerHTML = "";
        Object.entries(amenitiesData).forEach(([cat, items], idx) => {
          const section = document.createElement("div");
          section.className = "border rounded mb-2";

          const header = document.createElement("button");
          header.type = "button";
          header.className = "w-100 text-start px-3 py-2 bg-light hover-bg border-0 d-flex align-items-center justify-content-between";
          header.innerHTML = `<span class="font-medium">${cat}</span><span class="text-sm text-gray-500">Toggle</span>`;

          const body = document.createElement("div");
          body.className = "px-3 py-2 d-none";

          const list = document.createElement("div");
          list.className = "row g-2";

          const filtered = items.filter(i => i.toLowerCase().includes(filter.toLowerCase()));
          filtered.forEach((amenity, i) => {
            const col = document.createElement("div");
            col.className = "col-12 col-md-6";
            const label = document.createElement("label");
            label.className = "d-flex align-items-center gap-2 p-2 rounded amenity-item";
            label.innerHTML = `
              <input type="checkbox" class="form-check-input" name="listing[amenities][${cat}][]" value="${amenity}">
              <span class="small">${amenity}</span>`;
            col.appendChild(label);
            list.appendChild(col);
          });

          body.appendChild(list);
          header.addEventListener("click", () => { body.classList.toggle("d-none"); });
          section.appendChild(header);
          section.appendChild(body);
          root.appendChild(section);
        });
      }

      renderAmenities("");
      const search = document.getElementById("amenities-search");
      search.addEventListener("input", (e)=> renderAmenities(e.target.value));
    </script>